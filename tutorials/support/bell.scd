//=============================================================================
//
// To execute this file in SuperCollider type:
//    COMMAND-A  (select all)
//    COMMAND-Return  (evaluate)

// This file models bell data taken from http://www.hibberts.co.uk/lym2t11.par
// The spectral data from the website (table a) is normalized by me in table (b)
// so that it can be loaded into a synthdef that will sound like the bell but
// be able to change fundamental frequency, amplitude and duration.
//
//  Here is the original bell data from the website:
//
//  Freq.,       SplashAmp,   TailAmp,    Attack,     Decay,    Cents

(
a=[[ 351.750000,   0.000000,   5.100000,  0.300000,   1.200000, -2266.393188],
   [ 352.000000,   0.000000,  16.900000,  0.300000,   1.200000, -2265.163182], //hum (-2 octave)
   [ 596.500000,   0.000000,  30.500000,  0.300000,   2.600000, -1352.027157],
   [ 596.800000,   0.000000,  84.500000,  0.300000,   2.600000, -1351.156680], //prime (-1 octave)
   [ 786.500000,   0.000000,  95.000000,  0.000000,   7.000000,  -873.317617], //tierce
   [1026.000000,  10.000000,   3.800000,  0.250000,  15.000000,  -413.103158], //quint
   [1302.500000, 120.000000,  30.000000,  0.100000,   3.500000,     0.000000], //nominal
   [1544.820000,   0.000000,  35.000000,  0.150000,  12.000000,   295.386441],
   [1546.000000,   0.000000,  18.000000,  0.150000,  18.000000,   296.708328],
   [1646.500000,  17.000000,   5.000000,  0.000000,  20.000000,   405.742956],
   [1919.000000,  35.000000,  13.000000,  0.500000,  10.000000,   670.885588],
   [2179.500000,  10.000000,   3.000000,  0.300000,  10.000000,   891.256572],
   [2487.500000,   0.000000,  13.000000,  0.050000,  10.000000,  1120.095752],
   [2587.000000,   0.000000,  23.000000,  0.000000,  25.000000,  1187.995984],
   [2605.500000,  18.000000,   7.400000,  0.110000,   9.000000,  1200.332225],
   [2606.600000,   7.000000,   3.000000,  0.110000,   9.000000,  1201.062969],
   [3307.000000,   0.000000,   5.500000,  0.000000,  35.000000,  1613.087562],
   [3341.000000,  22.000000,  18.000000,  0.250000,  50.000000,  1630.795886],
   [4106.500000,   6.000000,   1.000000,  0.500000,  15.000000,  1987.951054],
   [4708.000000,   1.250000,   0.750000,  0.050000,  50.000000,  2224.597074],
   [4886.000000,   2.600000,   2.600000,  0.100000,  15.000000,  2288.844524],
   [5676.000000,   1.500000,   0.500000,  0.070000,  12.000000,  2548.309388]]
);

//  Here is my normalized version of table a:
//
//  [Freq,           SplashAmp,         TailAmp,            Attack, Decay             ]

(
b=[[1.0,             0.0,               0.0425,             0.3,    1.0               ],
   [1.000710732054,  0.0,               0.14083333333333,   0.3,    1.0               ],
   [1.6958066808813, 0.0,               0.25416666666667,   0.3,    0.46153846153846  ],
   [1.6966595593461, 0.0,               0.70416666666667,   0.3,    0.46153846153846  ],
   [2.2359630419332, 0.0,               0.79166666666667,   0.0,    0.17142857142857  ],
   [2.9168443496802, 0.083333333333333, 0.031666666666667,  0.25,   0.08              ],
   [3.7029140014215, 1.0,               0.25,               0.1,    0.34285714285714  ],
   [4.3918123667377, 0.0,               0.29166666666667,   0.15,   0.1               ],
   [4.3951670220327, 0.0,               0.15,               0.15,   0.066666666666667 ],
   [4.680881307747,  0.14166666666667,  0.041666666666667,  0.0,    0.06              ],
   [5.455579246624,  0.29166666666667,  0.10833333333333,   0.5,    0.12              ],
   [6.1961620469083, 0.083333333333333, 0.025,              0.3,    0.12              ],
   [7.0717839374556, 0.0,               0.10833333333333,   0.05,   0.12              ],
   [7.3546552949538, 0.0,               0.19166666666667,   0.0,    0.048             ],
   [7.407249466951,  0.15,              0.061666666666667,  0.11,   0.13333333333333  ],
   [7.4103766879886, 0.058333333333333, 0.025,              0.11,   0.13333333333333  ],
   [9.4015636105188, 0.0,               0.045833333333333,  0.0,    0.034285714285714 ],
   [9.498223169865,  0.18333333333333,  0.15,               0.25,   0.024             ],
   [11.674484719261, 0.05,              0.0083333333333333, 0.5,    0.08              ],
   [13.384506041222, 0.010416666666667, 0.00625,            0.05,   0.024             ],
   [13.890547263682, 0.021666666666667, 0.021666666666667,  0.1,    0.08              ],
   [16.136460554371, 0.0125,            0.0041666666666667, 0.07,   0.1               ]]
);

//=============================================================================
// The bell instrument (additive synth)
//=============================================================================

s.waitForBoot({
  SynthDef(\bell, {
		arg freq = 351.75, amp=0.3, dur=15, pan=0, gate=1;
		var oscs;
		oscs = b.collect({arg x;
			var hertz = x.at(0) * freq;
			var splashamp = x.at(1) * amp;
			var tailamp = x.at(2) * amp;
			var attack = x.at(3);
			var decay = x.at(4) * dur;
			var done = if(decay == dur, 2, 0);
			var ampenv = Env.new([splashamp, tailamp*(2/3), tailamp, 0],
				[attack*(1/4), attack*(3/4), decay], 'sin');
			var ampgen=EnvGen.kr(ampenv, gate, doneAction: done);
			SinOsc.ar(hertz, mul: ampgen);});
		Out.ar(0, Pan2.ar(Mix.new(oscs / oscs.size), pan));
	}).send;
});

// Synth(\bell)
// Synth(\bell, [\freq, rrand(110,1050), \dur, rrand(2,10), \amp, 0.8])

//=============================================================================
// Here is the OSC hook to play incoming OSC messages sent from musx.
//=============================================================================

(
  n = NetAddr(\localhost.asString, 7779);
  o = OSCFunc({|msg, time, from, port|
    Synth(\bell, [\freq, msg.at(2), \dur, msg.at(3), \amp, msg.at(4)]);
	postln(msg.asString);
    }, '/musx', nil, 57120);
  postln("OK!")
);


/*
// This hook just prints out the data to the post window, you can use it to
// debug connection problems...
(
  n = NetAddr(\localhost.asString, 7779);
  o = OSCFunc({|msg, time, from, port|  postln(msg.asString + " @ " + time.asString)}, '/musx', nil, 57120);
  postln("OK!")
)
*/
